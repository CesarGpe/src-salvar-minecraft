import re
from beet import Predicate
from utils import slot_to_nbt_path

function mc2:technical/damage_macro:
	$item modify entity @s $(slot) {"function": "minecraft:set_components","components": {"minecraft:damage": $(damage)}}

function mc2:technical/tp_macro:
	$tp @s $(x) $(y) $(z)

function mc2:technical/spreadplayers_macro:
	$spreadplayers $(x) $(z) 0 8 false @s

def chance(value):
	registry = f"mc2:chance/{value}"
	if registry in ctx.data.predicates:
		return registry
	ctx.data.predicates[registry] = Predicate({
		"condition": "minecraft:random_chance",
		"chance": value
	})
	return registry

def light(min, max):
	registry = f"mc2:light/{min}-{max}"
	if registry in ctx.data.predicates:
		return registry
	ctx.data.predicates[registry] = Predicate({
		"condition": "minecraft:location_check",
		"predicate": {
			"light": {
				"light": {
					"min": min,
					"max": max
				}
			}
		}
	})
	return registry

def damageItem(SLOT:str, AMOUNT=1):
	DAMAGE = "mc2.utils.durability"
	DATA_SLOT = slot_to_nbt_path(SLOT)

    # For the first damage proc, damage component could not be present yet
    execute unless data entity @s f'{DATA_SLOT}.components."minecraft:damage"' run return run item modify entity @s SLOT {"function":"minecraft:set_components","components":{"minecraft:damage":AMOUNT}}

	# Get durability, add, then damage the item
	execute store result score @s DAMAGE run data get entity @s f'{DATA_SLOT}.components."minecraft:damage"'
	execute store result storage mc2:storage data.utils.damage int 1 run scoreboard players add @s DAMAGE AMOUNT

	data modify storage mc2:storage data.utils merge value {slot:SLOT}
	function mc2:technical/damage_macro with storage mc2:storage data.utils
